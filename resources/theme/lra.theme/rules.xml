<?xml version="1.0" encoding="UTF-8"?>
<rules
        xmlns="http://namespaces.plone.org/diazo"
        xmlns:css="http://namespaces.plone.org/diazo/css"
        xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

    <!-- Template for navigation tree rewrites -->
    <xsl:template name="nav-tree">
        <div class="app-card app-card-nav app-nav-list">
            <div class="app-card-header app-card-header-nav-list">
                Navigation
            </div>
            <div class="app-card-main app-card__main--no-padding">
                <nav class="app-nav-tree">
                    <xsl:apply-templates select="./nav/*"/>
                </nav>
            </div>
        </div>
    </xsl:template>
    <xsl:template name="nav-list-base">
        <ul class="app-nav-tree-list app-nav-list app-nav-list--level-0">
            <xsl:apply-templates />
        </ul>
    </xsl:template>
    <xsl:template name="nav-list">
        <ul class="app-nav-list">
            <xsl:if test="@class[contains(.,'navTreeLevel1')]">
                <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-list--level-1</xsl:attribute>
            </xsl:if>
            <xsl:if test="@class[contains(.,'navTreeLevel2')]">
                <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-list--level-2</xsl:attribute>
            </xsl:if>
            <xsl:if test="@class[contains(.,'navTreeLevel3')]">
                <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-list--level-3</xsl:attribute>
            </xsl:if>
            <xsl:if test="@class[contains(.,'navTreeLevel4')]">
                <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-list--level-4</xsl:attribute>
            </xsl:if>
            <xsl:apply-templates />
        </ul>
    </xsl:template>
    <xsl:template name="nav-tree-item">
        <li class="app-nav-list-item">
            <xsl:choose>
                <xsl:when css:test=".navTreeCurrentNode">
                    <xsl:attribute name="class">app-nav-list-item app-nav-list-item-active</xsl:attribute>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:attribute name="class">app-nav-list-item</xsl:attribute>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:apply-templates />
        </li>
    </xsl:template>
    <xsl:template name="nav-tree-link">
        <a class="app-nav-list-link">
            <xsl:choose>
                <xsl:when css:test=".navTreeCurrentNode">
                    <xsl:attribute name="class">app-nav-list-link app-nav-list-link-active</xsl:attribute>
                </xsl:when>
                <xsl:when css:test=".navTreeItemInPath">
                    <xsl:attribute name="class">app-nav-list-link app-nav-list-link-open</xsl:attribute>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:attribute name="class">app-nav-list-link</xsl:attribute>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:attribute name="href"><xsl:value-of select="@href" /></xsl:attribute>
            <xsl:copy-of select="./a/@*[local-name() != 'class']"/>
            <!--<xsl:attribute name="class"><xsl:value-of select="./@class" /> app-nav-list-link</xsl:attribute>-->
            <xsl:copy-of select="./text()" />
        </a>
    </xsl:template>

    <xsl:template name="pagination-list">
        <ul class="c-pagination__list">
            <xsl:apply-templates />
        </ul>
    </xsl:template>
    <xsl:template name="pagination-list-item">
        <li class="c-pagination__list-item">
            <xsl:choose>
                <xsl:when css:test=".active">
                    <xsl:attribute name="class">c-pagination__list-item c-pagination__list-item--active</xsl:attribute>
                </xsl:when>
                <xsl:when css:test=".previous">
                    <xsl:attribute name="class">c-pagination__list-item c-pagination__list-item--previous</xsl:attribute>
                </xsl:when>
                <xsl:when css:test=".next">
                    <xsl:attribute name="class">c-pagination__list-item c-pagination__list-item--next</xsl:attribute>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:attribute name="class">c-pagination__list-item</xsl:attribute>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:apply-templates />
        </li>
    </xsl:template>
    <xsl:template name="pagination-link">
        <a class="c-pagination__link">
            <xsl:attribute name="href"><xsl:value-of select="@href" /></xsl:attribute>
            <xsl:apply-templates />
        </a>
    </xsl:template>

    <notheme if="$ajax_load" />
    <theme href="full/index.html" css:if-content=".template-folder_contents" />
    <!-- Setup custom login form -->
        <!-- Setup custom login form -->
    <theme href="signin/index.html" css:if-content="body.template-login" />
    <theme href="signin/index.html" css:if-content="body.template-login_form" />
    <theme href="signin/index.html" css:if-content="body.template-login-help" />
    <theme href="signin/index.html" css:if-content="body.template-passwordreset" />
    <theme href="funding/index.html" css:if-content="body.subsection-klimaschutz-termine-klimaschutz" />
    <theme href="full/index.html" css:if-content="body.template-search" />
    <theme href="full/index.html" css:if-content="body.template-default_error_message" />
    <theme href="full/index.html" css:if-content="body.template-contact-info" />
    <theme href="chart/index.html" css:if-content="body.subsection-verwaltungsgliederungsplan" />
    <theme href="chart/index.html" css:if-content="body.subsection-fachbereiche-fachbereiche" />
    <theme href="full/index.html" css:if-content="body.section-impressum" />
    <theme href="full/index.html" css:if-content="body.section-rechtliche-hinweise" />
    <theme href="full/index.html" css:if-content="body.section-kontakt" />




    <theme href="frontpage/index.html" css:if-content="body.template-startseite" />
    <theme href="index.html" css:if-content="body.template-landingpage-view" />

    <!-- Rules applying to a standard Plone web page -->
    <rules css:if-content="#visual-portal-wrapper">

        <notheme if="$ajax_load" />

        <theme href="theme/index.html" />


        <!-- HEAD -->
        <copy attributes="*" css:theme="html" css:content="html" />

        <replace css:theme="title" css:content="title" />
        <after theme="/html/head/title" css:content="base" />
        <!-- Add meta tags -->
        <drop css:content="meta[name='viewport']" />
        <before content="/html/head/meta" theme="/html/head/title" />

        <!-- Add stylesheets and javascript -->
        <before css:theme="head link[rel='stylesheet']"
                content="/html/head/link"
        />
        <after
                content="/html/head/style | /html/head/script"
                theme-children="/html/head"
        />

        <drop css:theme="[data-env='development']" />
        <drop theme="/html/body/script" />


        <!-- Custom favicon implementation -->
        <drop css:content="head link[rel='apple-touch-icon-precomposed']" />
        <drop css:content="head link[rel='apple-touch-icon']" />
        <drop css:content="head link[rel='shortcut icon']" />


        <!-- Copy over the id/class attributes on the body tag.
             This is important for per-section styling -->
        <merge attributes="class" css:content="body" css:theme="body" />
        <copy attributes="*" css:content="body" css:theme="body" />

        <!-- CMSUI Editbar replacements -->
        <drop css:theme="#app-toolbar"
              css:if-content=".userrole-anonymous" />

        <!--<replace css:theme="#app-toolbar"
            css:content="#app-toolbar" />-->

        <!-- toolbar -->
        <replace css:theme="#app-toolbar"
                 css:content="#edit-bar"
                 css:if-not-content=".ajax_load"
                 css:if-content=".userrole-authenticated"/>

        <!-- Mode Alert -->
        <drop css:theme=".c-identifier"
              if="$mode = 'production'" />

        <!-- Logo (link target) -->
        <copy attributes="href" css:content="#portal-logo" css:theme="a.app-brand" />
        <copy attributes="href" css:content="#portal-logo" css:theme="a.app-brandname" />
        <copy attributes="href" css:content="#portal-logo" css:theme="a.app-navbar-brand" />
        <copy attributes="href" css:content="#portal-logo" css:theme="a.app-navbar-section" />

        <!-- Portal searchbox -->
        <copy attributes="*" css:content="#portal-searchbox form"
              css:theme="#app-searchbox" />

        <replace css:content="#portal-searchbox" css:theme="#app-searchbox" method="raw" />

        <!-- Global navigation -->
        <!--<replace css:content="#portal-globalnav li"
                 css:theme-children="#app-navbar-nav" />-->


        <!--<replace css:content-children="#app-navbar-nav-wrapper"
          css:theme="#app-navbar-nav"
          href="/@@navbar-view" />-->

        <!-- Breadcrumbs
        <replace css:content="#portal-breadcrumbs" method="raw" if-content="//*[@id='breadcrumbs-1']">
            <ol class="app-breadcrumbs">
                <xsl:for-each select="./div/ol/li[not(position() = last())]//a">
                    <li class="app-breadcrumb">
                        <xsl:apply-templates select="."/>
                    </li>
                </xsl:for-each>
                <li class="app-breadcrumb active">
                    <xsl:apply-templates select="./div/ol/li[position() = last()]/*"/>
                </li>
            </ol>
        </replace>-->
        <replace css:theme-children="#app-pathbar" css:content="#portal-breadcrumbs" />


        <!-- pagination -->
        <replace css:content=".pagination > ul">
            <xsl:call-template name="pagination-list" />
        </replace>
        <replace css:content=".pagination > ul > li">
            <xsl:call-template name="pagination-list-item" />
        </replace>
        <replace css:content=".pagination > ul > li > a">
            <xsl:call-template name="pagination-link" />
        </replace>

        <replace css:content=".pagination">
            <div class="c-pagination">
                <xsl:apply-templates />
            </div>
        </replace>


        <drop css:theme="#app-banner"
              css:if-not-content="#app-banner" />

        <replace css:content="#app-banner"
                 css:theme="#app-banner"
                 css:if-content="#app-banner" />

        <!-- Document First Heading -->
        <replace css:content=".documentFirstHeading">
            <div class="app-page-header">
                <h1 class="app-page-title">
                    <xsl:apply-templates />
                </h1>
            </div>
        </replace>
        <!-- Document lead description -->
        <replace css:content=".documentDescription">
            <p class="app-page-abstract">
                <xsl:apply-templates />
            </p>
        </replace>

        <!-- Transform content area classes -->

        <replace css:content=".image-inline">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class">app-img app-page-image</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>
        <replace css:content=".image-left">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class">app-img app-page-image</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>
        <replace css:content=".image-right">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class">app-img app-page-image</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <replace css:content=".link-parent">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class">c-button c-button--default c-button--link-parent</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>


        <!-- Add classes to content core -->
        <!--<replace css:content="#content-core">
            <div class="app-page-content" id="content-core">
                <xsl:apply-templates />
            </div>
        </replace>-->

        <!-- Document Content -->
        <replace css:content-children="#content"
                 css:theme-children="#content" />

        <!-- Fix table styles -->
        <replace css:content="table.listing">
            <table>
                <xsl:copy-of select="@*"/>
                <xsl:attribute name="class">table table-hover</xsl:attribute>
                <xsl:apply-templates />
            </table>
        </replace>

        <!-- Support contact card viewlet -->
        <after css:theme="#content"
               css:content="#app-contact-viewlet-elements"
               css:if-content="#app-contact-viewlet-elements" />

        <!-- Alert and portal messages -->
        <strip css:content=".portalMessage dd"/>
        <replace css:content=".portalMessage" method="raw">
            <xsl:choose>
                <xsl:when css:test=".portalMessage[style]"/>
                <xsl:when css:test=".portalMessage">
                    <div class="c-alert c-alert--default c-alert--dismissable" role="alert">
                        <xsl:choose>
                            <xsl:when css:test=".info">
                                <xsl:attribute name="class">c-alert c-alert--success c-alert--dismissable</xsl:attribute>
                            </xsl:when>
                            <xsl:when css:test=".error">
                                <xsl:attribute name="class">c-alert c-alert--danger c-alert-dismissable</xsl:attribute>
                            </xsl:when>
                            <xsl:when css:test=".warning">
                                <xsl:attribute name="class">c-alert c-alert--warning c-alert--dismissable</xsl:attribute>
                            </xsl:when>
                        </xsl:choose>
                        <h4><xsl:apply-templates select="./dt/*"/></h4>
                        <xsl:apply-templates />
                    </div>
                </xsl:when>
            </xsl:choose>
        </replace>
        <rules css:if-not-content=".template-prefs_install_products_form">
            <before css:content=".portalMessage" css:theme-children="#app-main" />
        </rules>

        <!-- Form transforms -->
        <replace css:content="form">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-form</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <replace css:content=".formHelp">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-form__help</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <!-- Required marker -->
        <replace css:content="span.required">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class"><xsl:value-of select="./@class" /> text--warning</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <replace content="//*[contains(@class, 'fieldRequired')]/@class">
            <xsl:attribute name="class"><xsl:value-of select="." /> text-warning</xsl:attribute>
        </replace>
        <!-- Drop .label class for twbs compatibility -->
        <drop content="//label/span[@class='label']/@class" />

        <replace css:content=".field">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:choose>
                    <xsl:when css:test=".error">
                        <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-form__group form__group--has-error</xsl:attribute>
                    </xsl:when>
                    <xsl:otherwise>
                        <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-form__group</xsl:attribute>
                    </xsl:otherwise>
                </xsl:choose>
                <xsl:if test="not(*[@class='widget']) and not(table)">
                    <xsl:choose>
                        <xsl:when css:test="[type='radio']">
                            <xsl:attribute name="class">o-form__group form__field form__field--radio</xsl:attribute>
                        </xsl:when>
                        <xsl:when css:test="[type='checkbox']">
                            <xsl:attribute name="class">o-form__group form__field form__field--checkbox</xsl:attribute>
                        </xsl:when>
                        <xsl:when css:test="[type='file']">
                            <xsl:attribute name="class">o-form__group form__field form__field--file-input</xsl:attribute>
                        </xsl:when>
                        <xsl:when css:test="[type='password']">
                            <xsl:attribute name="class">o-form__group form__field form__field--password</xsl:attribute>
                        </xsl:when>
                    </xsl:choose>
                </xsl:if>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <replace css:content="select">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-select</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <replace css:content="label">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-form__label</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <!-- Replace input elements (submit buttons and checkboxes) -->
        <replace css:content="input">
            <xsl:choose>
                <xsl:when css:test="[type='submit'],[type='button']">
                    <button>
                        <xsl:copy-of select="@*" />
                        <xsl:choose>
                            <xsl:when css:test=".delete, .destructive, [value='Delete']">
                                <xsl:attribute name="class"><xsl:value-of select="./@class" /> c-button c-button--danger</xsl:attribute>
                            </xsl:when>
                            <xsl:when css:test=".searchButton, .context">
                                <xsl:attribute name="class"><xsl:value-of select="./@class" /> c-button c-button--primary</xsl:attribute>
                            </xsl:when>
                            <xsl:when css:test=".standalone, .submit, .submit-widget, [type='file']">
                                <xsl:attribute name="class"><xsl:value-of select="./@class" /> c-button c-button--default</xsl:attribute>
                            </xsl:when>
                            <xsl:when css:test="[type='file']">
                                <xsl:attribute name="class"><xsl:value-of select="./@class" /> c-button c-button--upload</xsl:attribute>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:attribute name="class"><xsl:value-of select="./@class" /> c-button c-button--default</xsl:attribute>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:value-of select="./@value"/>
                    </button>
                </xsl:when>
                <xsl:when css:test="[type='text'],[name$='.title'],#title, textarea">
                    <xsl:copy>
                        <xsl:copy-of select="@*" />
                        <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-form__control o-form__control--text</xsl:attribute>
                        <xsl:apply-templates />
                    </xsl:copy>
                </xsl:when>
                <xsl:when css:test="[type='checkbox']:not(.o-switch__control)">
                    <xsl:copy>
                        <xsl:copy-of select="@*" />
                        <xsl:attribute name="class">o-form__control o-form__control--checkbox</xsl:attribute>
                        <xsl:apply-templates />
                    </xsl:copy>
                </xsl:when>
                <xsl:when css:test="[type='file']">
                    <xsl:copy>
                        <xsl:copy-of select="@*" />
                        <xsl:attribute name="class">o-form__control o-form__control--file</xsl:attribute>
                        <xsl:apply-templates />
                    </xsl:copy>
                </xsl:when>
                <xsl:when css:test="[type='password']">
                    <xsl:copy>
                        <xsl:copy-of select="@*" />
                        <xsl:attribute name="class">o-form__control o-form__control--password</xsl:attribute>
                        <xsl:apply-templates />
                        <div class="c-password-toggle hiddenStructure">
                            <button class="x-ray c-button c-button-default c-button--sm" data-x-ray="#__ac_password" data-default="show">
                                <span class="x-ray-show" data-x-ray-show="show">Show Password</span>
                                <span class="x-ray-hide" data-x-ray-hide="hide">Hide Password</span>
                            </button>
                        </div>
                    </xsl:copy>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:copy-of select="."/>
                </xsl:otherwise>
            </xsl:choose>
        </replace>

        <replace css:content="textarea">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-form__control o-form__control--textarea</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <replace css:content=".formControls">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:attribute name="class"><xsl:value-of select="./@class" /> o-form__actions</xsl:attribute>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <replace css:content=".configlets">
            <ul class="o-menu">
                <li class="o-menu__item">
                    <div class="c-configlet">
                        <xsl:apply-templates select="./li/*"/>
                    </div>
                </li>
            </ul>
        </replace>


        <!-- Navtree -->
        <!-- Uses card semantics throughout the template
            The different parts are restyled from included template partials
        -->

        <replace css:content=".portletNavigationTree" css:if-not-content=".template-overview-controlpanel">
            <xsl:call-template name="nav-tree" />
        </replace>
        <replace css:content=".navTreeLevel0">
            <xsl:call-template name="nav-list-base" />
        </replace>
        <replace css:content=".navTree:not(.navTreeLevel0)">
            <xsl:call-template name="nav-list" />
        </replace>
        <replace css:content=".navTreeItem">
            <xsl:call-template name="nav-tree-item" />
        </replace>
        <replace css:content=".navTreeItem > a">
            <xsl:call-template name="nav-tree-link" />
        </replace>
        <replace css:content=".xxnavTree" method="raw">
            <xsl:copy>
                <xsl:copy-of select="@*" />
                <xsl:if test="@class[contains(.,'navTreeLevel0')]">
                    <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-level-0</xsl:attribute>
                </xsl:if>
                <xsl:if test="@class[contains(.,'navTreeLevel1')]">
                    <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-level-1</xsl:attribute>
                </xsl:if>
                <xsl:if test="@class[contains(.,'navTreeLevel2')]">
                    <xsl:attribute name="class">app-nav-tree-list app-nav-list app-nav-level-2</xsl:attribute>
                </xsl:if>
                <xsl:apply-templates />
            </xsl:copy>
        </replace>

        <!-- Portlets-->
        <replace css:content=".portletNavigationTree" css:if-content=".template-overview-controlpanel">
            <div class="c-card">
                <xsl:for-each css:select=".portlet > *">
                    <div>
                        <xsl:if test="@class[contains(.,'portletHeader')]">
                            <xsl:attribute name="class">c-card__header</xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@class[contains(.,'portletContent')]">
                            <xsl:attribute name="class">c-card__main c-card__main--plain</xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@class[contains(.,'portletFooter')]">
                            <xsl:attribute name="class">c-card__footer</xsl:attribute>
                        </xsl:if>
                        <xsl:copy-of select="node()"/>
                    </div>
                </xsl:for-each>
            </div>
        </replace>


        <!-- Portlets-->
        <replace css:content=".portlet:not(.portletNavigationTree)" css:if-not-content=".template-prefs_install_products_form">
            <div class="app-card">
                <xsl:for-each css:select=".portlet > *">
                    <div>
                        <xsl:if test="@class[contains(.,'portletHeader')]">
                            <xsl:attribute name="class">app-card-header</xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@class[contains(.,'portletContent')]">
                            <xsl:attribute name="class">app-card-main</xsl:attribute>
                        </xsl:if>
                        <xsl:if test="@class[contains(.,'portletFooter')]">
                            <xsl:attribute name="class">app-card-footer</xsl:attribute>
                        </xsl:if>
                        <xsl:copy-of select="node()"/>
                    </div>
                </xsl:for-each>
            </div>
        </replace>

        <rules css:if-content=".template-prefs_install_products_form">
            <replace css:content=".portlet:not(.portletNavigationTree)">
                <xsl:copy>
                    <xsl:copy-of select="@*" />
                    <xsl:attribute name="class"><xsl:value-of select="./@class" /> c-control-panel</xsl:attribute>
                    <xsl:apply-templates />
                </xsl:copy>
            </replace>
            <replace css:content=".portlet:not(.portletNavigationTree) .portletHeader">
                <xsl:copy>
                    <xsl:copy-of select="@*" />
                    <xsl:attribute name="class">c-control-panel__header</xsl:attribute>
                    <xsl:apply-templates />
                </xsl:copy>
            </replace>
        </rules>



        <!-- News -->
        <replace css:content-children="#app-news-list"
                 css:theme-children="#app-news-list-frontpage" />

        <!-- Columns
        <replace css:content-children="#portal-column-one > *"
            css:theme-children="#app-sidebar" />
        <replace css:content-children="#portal-column-two > *"
            css:theme-children="#app-sidebar" />-->



        <!-- Standard content area -->
        <rules css:if-not-content=".template-frontpage-view, .section-newsletter">
            <rules css:if-not-content="#portal-column-one">
                <drop css:theme="#app-sidebar" />
                <replace css:content-children="#content"
                         css:theme-children="#content"
                />
            </rules>
            <rules css:if-content="#portal-column-one, #portal-column-two">
                <before css:theme-children="#content" method="raw">
                    <xsl:attribute name="class">app-main app-main--grid</xsl:attribute>
                </before>
                <replace css:content-children="#portal-column-one > *"
                         css:theme-children="#app-sidebar" />
                <replace css:content-children="#portal-column-two > *"
                         css:theme-children="#app-sidebar" />
                <replace css:content-children="#content"
                         css:theme-children="#content"
                />
            </rules>
        </rules>

        <!-- Contact cards -->
        <after css:theme-children="#app-sidebar"
               css:content-children="#app-contact-viewlet-cards" />

        <!-- Support cookie consent -->
        <after css:theme-children="#app-footer"
               css:content="#cookie-consent"
               css:if-content="#cookie-consent" />

    </rules>

</rules>
